import java.util.*;
import java.awt.*;



public class AOEManager 
{
	
	
	private Vector vVertex; // Set of Event
	private Vector vEdge;   // Set of Edge   
	private WeightedDirectedGraph graph;
	private VectorStack stack = new VectorStack();
	private boolean isTesting = false;  // Turn Testing On and Off
	private Vertex[] vertices;
	
	// Variables that store the start and end of the vertex.
	// Used in ForwardStage() and BackwardStage(). 
	private Vertex start;
	private Vertex end;

	// Class Constructor
	public AOEManager() 
	{
		vVertex = new Vector();
		vEdge = new Vector();
	}

	// Draw the activity network
	public void draw(Graphics g)
	{
		for (int i =  0; i < vVertex.size(); i++)
		{
			((Vertex)vVertex.elementAt(i)).draw(g);
		}
		
		for (int i =  0; i < vEdge.size(); i++)
		{
			((Edge)vEdge.elementAt(i)).draw(g);
		}
	}
	
	//
	
	
	public void addVertex(int x, int y, int id) 
	{
		vVertex.add(new Vertex(x, y, id));
	}

	//
	public void addEdge(Vertex v1, Vertex v2, int timeActivity, int iDedge) 
	{
		vEdge.add(new Edge(v1,v2, timeActivity,iDedge));
	}

	// Return a specific Vertex if x and y are within the circle
	public Vertex findVertex (int x , int y) 
	{
		for (int i = 0; i < vVertex.size(); i++) 
		{
			if (((Vertex)vVertex.elementAt(i)).isInclude( x , y )) 
			{
				return (Vertex)vVertex.elementAt(i);
			}
		}
		return null;
	}
	 
	// Return a specific Vertex if the point are along the Edge
	public Edge findEdge(Point pt) 
	{
		for (int i = 0; i < vEdge.size(); i++) 
		{
			if (((Edge)vEdge.elementAt(i)).isInclude( pt))
			{
				return (Edge)vEdge.elementAt(i);
			}
		}
		return null;
	}

	public void criticalPath() 
	{
		//Checks to see if the vVertex isEmpty, if it is returns. 
		if (vVertex.isEmpty())
		{
			return;
		}
		
		vertices = new Vertex[vVertex.size()];
    
    	for (int i = 0; i < vVertex.size(); i++) 
    	{
    		Vertex v = (Vertex) vVertex.elementAt(i);
    		vertices[v.getId()] = v;
    	}
    
    	graph = new WeightedDirectedGraph(vVertex.size());
    
    	for (int i = 0; i < vEdge.size(); i++) 
    	{
    		Edge e = (Edge) vEdge.elementAt(i);
    		
    		if (e == null) 
    		{
    			System.out.println("Unexpected error occured in initialization of Weighted Graph.");
    			return;
    		}
    		
    		vertices[e.getSource()].incSuccessorsCount();
    		vertices[e.getDestination()].incPredecessorsCount();
    		graph.addEdge(e.getSource(), e.getDestination(), e.getTime());
    	}
    	
    	for (int i = 0; i < vVertex.size(); i++) 
    	{
    		Vertex v = (Vertex) vVertex.elementAt(i);
    		if (v.getPredecessorsCount() == 0) 
    		{
    			start = v;
    		} 
    		else if (v.getSuccessorsCount() == 0) 
    		{
    			end = v;
    		}
    	}
    	
    	// Calls forwardStage, backwardStage. 
    	forwardStage ();
    	backwardStage ();
		}

	public void forwardStage() 
	{
		stack.push(start);

		for (int loop = 0; loop < vertices.length; loop++)
		{
			Vertex v = (Vertex) stack.pop();
      
			if (v == null) 
			{
				System.out.println("Cycle Already exisits");
				return;
			} else {
				java.util.List<Integer> l = graph.getSuccessors(v.getId());
				
				for (Integer i : l) 
				{
					vertices[i].decPredecessorsCount();

					if (vertices[i].getEarliestEvent() < (v.getEarliestEvent() + graph.getWeight(v.getId(), i))) 
					{
						vertices[i].setEarliestEvent(v.getEarliestEvent() + graph.getWeight(v.getId(), i));
					}
          
					//Checks to see if predecessor count is == 0. 
					if (vertices[i].getPredecessorsCount() == 0) 
					{
						stack.push(vertices[i]);
					} 
					// Outputs error if a problem occurs. 
					else if (vertices[i].getPredecessorsCount() < 0) 
					{
						System.out.println("Unexpected error: PredecessorCount is < 0");
					}
				}
			}
		}
	// Checks to see if testing is enabled. 
    testing (isTesting);
  }
	

	public void backwardStage() 
	{
		if (end == null) 
		{
			System.out.println("Error: end vertex is not set.");
			return;
		}
    
		end.setLatestEvent(end.getEarliestEvent());
		
		for (int i = 0; i < vVertex.size(); i++) 
		{
			Vertex v = (Vertex) vVertex.elementAt(i);
			v.setLatestEvent(end.getLatestEvent());
		}
		
		stack.push(end); 
		
		for (int loop = 0; loop < vertices.length; loop++) 
		{
			Vertex v = (Vertex) stack.pop();
     
			if (v == null) 
			{
				System.out.println("Cycle exists in network backwardStage()");
				return;
			} else {
				java.util.List<Integer> l = graph.getPredecessors(v.getId());
        
				for (Integer i : l)
				{
					vertices[i].decSuccessorsCount();
          
					if (vertices[i].getLatestEvent() > (v.getLatestEvent() - graph.getWeight(i, v.getId()))) 
					{
						vertices[i].setLatestEvent(v.getLatestEvent() - graph.getWeight(i, v.getId()));
					}
					
					if (vertices[i].getSuccessorsCount() == 0) 
					{
						stack.push(vertices[i]);
					} 
					else if (vertices[i].getSuccessorsCount() < 0) 
					{
						System.out.println("Unexpected error: PredecessorCount is < zero. BackWard()");
					}
				}
			}
		}
      testing ( isTesting );
  }

	public void resetEarlyLateTime ()
	{
		for ( int i = 0; i < vVertex.size(); i ++ )
		{
			Vertex current = (Vertex)vVertex.elementAt(i);
			current.reset();
		}
	}

	public void testing (boolean testing)
	{
		if (testing)
		{
			System.out.println("Test: Forwardstage()");

			for ( int i = 0; i < vVertex.size(); i ++ )
			{
				Vertex vtry = ((Vertex)vVertex.elementAt(i)) ;
				System.out.println(vtry.getEarliestEvent());
			}

			System.out.println("Testing Backwardstage()");

			for ( int i = 0; i < vVertex.size(); i ++ )
			{
				Vertex vtry = ((Vertex)vVertex.elementAt(i)) ;
				System.out.println(vtry.getLatestEvent());
			}
		}
	}
}
